# This is a basic workflow to help you get started with Actions

name: Build Github Profile

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  schedule:
    - cron:  '0 */8 * * *'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # set china timezone
    env:
      TZ: Asia/Shanghai

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # get date
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y-%m")"
        shell: bash

      # cache almanac
      - uses: actions/cache@v3
        id: almanac-cache # use this to check for `cache-hit`
        with:
          path: .cache/${{ steps.get-date.outputs.date }}.json
          key: ${{ runner.os }}-almanac-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-almanac-

      # Runs a set of commands using the runners shell
      - name: Install package
        run: |
          yarn config get "strict-ssl"
          yarn config set "strict-ssl" false -g
          yarn config get "strict-ssl"
          yarn

      - name: Build
        run: yarn build

      - name: Get user name and email, and set to env
        uses: actions/github-script@v4
        id: user-config
        with:
          result-encoding: json
          script: |
            const resp = await github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            })
            const { data } = resp || {}
            const commits = data || []
            console.log('commits', commits)
            const [ latest ] = commits
            const { author = {} } = latest.commit || {}
            console.log('author', author)
            core.exportVariable('GIT_NAME', author.name)
            core.exportVariable('GIT_EMAIL', author.email)

      - name: Set git commit author
        run: |
          git config --global user.name $GIT_NAME
          git config --global user.email $GIT_EMAIL

      - name: Copy file
        run: cp dist/README.md README.md

      - name: Update GitHub Profile
        run: |
          git diff
          git pull
          git add ./README.md
          git commit -m "docs(readme): update README" || exit 0
          git push